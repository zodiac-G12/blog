(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{270:function(n,e,t){"use strict";t.r(e);var l=t(77),o=t.n(l),c={data:function(){return{link:"content15",prekiji:'\n## 経緯\n　去年からReactでずっと作っていたTODOアプリがあって、\n途中で飽きたので、そのまま似たような機能のものをSvelteで実装した。\n\n　課題観としては、trelloなどを想像して、使い勝手の悪いところ、\nもっとこうだったらいいのになという箇所に着目して、機能を実装したものである。\n\n## TLDR\n\n- [出来上がったアプリ](https://zodiac-g12.github.io/palladocs/)\n- [ソースコード](https://github.com/zodiac-G12/palladocs)\n\n## 課題となった箇所一覧\n\n- プロパティ受け渡し\n- イベント伝搬\n- Modalの実装\n- DnDの実装\n\n## プロパティ受け渡し\n\n　例えば以下のように、「__answer__」というプロパティを受け渡し出来る。\n渡す側は__{}__でプロパティ名を囲って渡す。\n受け取る側は「__export let__」で変数を宣言することで受け取ることが出来る。\n\nApp.svelte　\n```js\n<script>\n  import Nested from \'./Nested.svelte\';\n  const answer = 42;\n<\/script>\n\n<Nested {answer} />\n```\n\nNested.svelte\n```js\n<script>\n  export let answer;\n<\/script>\n\n<p>The answer is {answer}</p>\n```\n\n> Svelteのサンプル: https://svelte.dev/tutorial/default-values\n\n## イベント伝搬\n\n　色々と手段はあると思う。\nまず大元のコンポーネント、ルートコンポーネントにて、イベントが発火した際に処理したい関数と、\n変更を加えたいデータを用意しておく。\n\n　その上で、子コンポーネントに用意した関数とデータをプロパティとして渡す。\n子コンポーネントでイベントを検知して、その際に用意した関数と、データを使って、\n状態を変えるという方法をとった。\n\n　イベントの検知は以下のように「__on:〇〇__」と書き行う。\n\n```js\n<script>\n  function handleClick() {\n    alert(\'clicked\');\n  }\n<\/script>\n\n<button on:click={handleClick}>\n  Click me\n</button>\n```\n\n> Svelteのサンプル: https://svelte.dev/tutorial/event-modifiers\n\n## Modalの実装\n\n　Modalに関してModalコンポーネントのサンプルコードをそのまま採用した。\n\n> Modalのサンプルコード: https://github.com/flekschas/svelte-simple-modal/blob/v0.8.0/src/Modal.svelte\n\n> Svelteのサンプル: https://svelte.dev/repl/033e824fad0a4e34907666e7196caec4?version=3.4.1\n\n　Modalコンポーネントの使い方としては以下のようにラップする形で用いる。\n\n```js\n<Modal>\n  <Board />\n</Modal>\n```\n\n　Modalを開くロジックは以下のようにする。なおこのコンポーネントはModalコンポーネントの内側になければならない。\n\n> https://github.com/flekschas/svelte-simple-modal/issues/16#issuecomment-641413134\n\nBoard.js\n```js\n<script>\nimport Popup from \'./Popup.svelte\';\n\nconst { open } = getContext(\'simple-modal\');\n\nconst showPopup = (num) => {\n  // 以下のnumのように、Popupコンポーネントを開くと同時に、propでデータを渡せる\n  open(Popup, { num });\n};\n<\/script>\n\n<div on:click={showPopup(100)}></div>\n```\n\n<br>\n\n## DnDの実装\n\n　ドラッッグアンドドロップの実装が一番の難関であったが、なんとか直感的なUXを実現できたかと思う。\nスマホの場合の挙動方針を今迷っているが、PCの挙動はほとんど満足しているものとなっている。\n\n　[svelte-dnd-action](https://github.com/isaacHagoel/svelte-dnd-action)というライブラリを用いることでDnDを実現した。\n　注意点としては、Modalのイベントと競合してしまってうまく動作しない箇所があったので、\nModal.svelteの[134行目](https://github.com/flekschas/svelte-simple-modal/blob/v0.8.0/src/Modal.svelte#L134)「__event.preventDefault()__」をコメントアウトすることでうまく動くようになった。\n\n> Svelteのサンプル: https://svelte.dev/repl/b4ac32e84dc24c079d7a5c243f787d26?version=3.32.1\n\n## 成果\n\n　実際の見た目は以下のようになる。\n\n- [ソースコード](https://github.com/zodiac-G12/palladocs)\n- [実際のサイト](https://zodiac-g12.github.io/palladocs/)\n\n<picture>\n  <source type="image/webp" srcset="/blog/palladocs_screen.webp">\n  <img alt="" src="/blog/palladocs_screen.png" decoding="async" style="width: 100%; margin: auto;border: none; box-shadow: none;"></img>\n</picture>\n\n<br>\n\n## 所感\n　Svelteは超軽くて早いのでいいなと思った。\nそして自由度が高い。実用回りも続々と出来上がってきていて、今後に大いに期待している。\n\n　今後このアプリをアカウントログイン制にして、Firebaseなどを用いてデータベースも作って、Apolloとかと連携しても面白いなと考えている。\n\n　あとは、スマホ版サイトのUXを改善したい。改善出来そうだよという人はコメントしてくださると嬉しい。妙案があれば賜りたい。\n\n'}},computed:{kiji:function(){return o()(this.prekiji)}},components:{DefaultArticle:function(){return t.e(0).then(t.bind(null,283))}}},r=t(20),component=Object(r.a)(c,(function(){var n=this.$createElement,e=this._self._c||n;return e("div",[e("DefaultArticle",{attrs:{content:{link:this.link,kiji:this.kiji}}})],1)}),[],!1,null,null,null);e.default=component.exports}}]);