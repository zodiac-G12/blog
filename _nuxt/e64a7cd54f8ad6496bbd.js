(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{276:function(n,t,e){"use strict";e.r(t);var r=e(77),c=e.n(r),o={data:function(){return{link:"content7",prekiji:'\n## 前書き\n　この記事は私が __「React」__ を学ぶために「LightsOutゲーム」を制作し、その過程で獲得したエクスペリエンスを共有するものである。\n前提知識としてJavaScriptの基本的な知識を要求する。  \n　この記事の重要なワードを列挙すると以下のようになる。\n\n- LightsOut\n- React\n- Threejs\n\n## LightsOutとは\n　N×Nの形に並んだライトをある法則にしたがって「すべて消灯 (lights out)」させることを目的としたパズルのこと。\n> https://ja.wikipedia.org/wiki/ライツアウト\n\n**ある法則:**\n\n- ライトの反転とは状態遷移のことであり、消灯状態であれば点灯状態に変化すること、また点灯から消灯への遷移を含むものとする\n- あるライトを選択し、そのマスと上下左右の隣一マスのライトを反転することができる\n\nプログラムコードに落とし込むと以下のようになる。\n```typescript\n// N: マスの数\n// x, y: 選択された位置を示す\n// statusLights: ライトの状態を格納する二次元配列\n\n// 選択箇所の反転\nstatusLights[x][y] = ~statusLights[x][y] & 1;\n\n// 上下左右の反転\n[[1,0],[0,1],[-1,0],[0,-1]].forEach((add) => {\n  // マスからはみ出ない範囲で反転の処理をする\n  if(0<=add[0]+x && add[0]+x<N && 0<=add[1]+y && add[1]+y<N) {\n    statusLights[add[0]+x][add[1]+y] = ~statusLights[add[0]+x][add[1]+y] & 1;\n  }\n});\n```\n\n**余談:** 気付きとして、「ある同じライトを偶数回選択したときに、状態は元に戻る」という定理が導かれる。\n\nつまり同じ箇所を二度選択することは、選択する前の「元に戻る」操作なので、無駄ということになる。\n\n## React\n　JavaScriptのライブラリ。\n> https://ja.reactjs.org/\n\n## ThreeJS\n　JavaScript3Dライブラリ。今回使ったのは、ThreeJSおよびreact-native用のReactレンダラーの**"react-three-fiber"**というものである。\n> https://github.com/pmndrs/react-three-fiber\n\n<center>\n<img alt="" width="" height="" style="max-width: 400px;" src="https://camo.githubusercontent.com/632c34fc980c96c6aa6e8317fa2d3567e37c2ece0a8ad12c3c13b700d074562c/68747470733a2f2f692e696d6775722e636f6d2f53485068496c732e676966"></img>\n<img alt="" width="" height="" style="max-width: 400px;" src="https://camo.githubusercontent.com/8811bfbd8a64ae0fd0a68fc486d9d39c64828eb2dccee73af57bb18b18911897/68747470733a2f2f692e696d6775722e636f6d2f64614a494456452e676966"></img>\n<img alt="" width="" height="" style="max-width: 400px;" src="https://camo.githubusercontent.com/6c567b130ef83a0fa77b6651a16e71a9d539fd58e897533e68cc44dc9f878a79/68747470733a2f2f692e696d6775722e636f6d2f587363735767752e676966"></img>\n</center>\n\n以下の **&lt;Canvas&gt;コンポーネント** や **useFrameカスタムフック** を用いることで大体のやりたい事ができると考えている。\n\n```typescript\nimport { Canvas, useFrame } from \'react-three-fiber\'\n```\n<br>\n\n## 課題となった点\n\n---\n\n### 1. カメラ視点をドラッグで制御する方法\n\n---\n\n　ThreeJSに含まれる[OrbitControls](https://threejs.org/docs/#examples/en/controls/OrbitControls)を用いる。\n\nreact-three-fiberで用いる際は以下のように書くことで実現した。\n\n```javascript\nimport { useEffect } from \'react\';\n\nimport { extend, useThree } from \'react-three-fiber\';\n\nimport { OrbitControls } from \'three/examples/jsm/controls/OrbitControls\';\n\nextend({ OrbitControls });\n\n// &lt;Canvas&gt;タグの中で用いるコンポーネント\nconst CameraController = () => {\n    const { camera, gl } = useThree();\n    const cameraDistance = 700;\n    useEffect(() => {\n            const controls = new OrbitControls(camera, gl.domElement);\n            camera.position.set(0, 0, cameraDistance);\n            controls.minDistance = 0;\n            controls.maxDistance = 1000;\n            return () => {\n                controls.dispose();\n            };\n        },\n        [camera, gl]\n    );\n    return null;\n};\n\nexport default CameraController;\n```\n\n\n> 参考文献: https://qiita.com/Quarter-lab/items/151f06bddea1fc9cf4d7\n\n---\n\n### 2. スマホでのタッチイベントが動作しない問題\n\n---\n\n　**OrbitControls.js**というファイルの**onTouchStart**関数内における\n\n<center>\n**event.preventDefault()**\n</center>\n\nが原因であった。\n\n対応として、所定の箇所をコメントアウトすることで動作するようになった。　\n> https://github.com/mrdoob/three.js/blob/dev/examples/jsm/controls/OrbitControls.js#L1024\n\n公式の見解でも、コメントアウト対応をしてくれと解釈できるコメントがある。\n> https://github.com/mrdoob/three.js/issues/16254#issuecomment-483340392\n\nなぜ「**event.preventDefault()**」が必要なのか語られている。\n> https://github.com/mrdoob/three.js/pull/18612#issuecomment-585607781\n\n---\n\n### 3. 各マスのタッチイベントとプロパティ伝搬に関する課題\n\n---\n\n　例えば、mesh_1をクリックした時にmesh_xのライトを反転させる、タッチイベント発生時の状態遷移伝搬の課題、\n\nmesh_1, mesh_2, ...それぞれの現在の点灯状態を管理する、全データの状態管理の課題、\n\n以上の課題を解決した方法を以下に述べる。\n\n> meshをuseRef()で定義する。\n\n```typescript\n<Canvas>\n  <CameraController>\n  <Mesh_root>\n    <mesh_1\n      onClick={() => {setState(state)}}\n      state={state}\n    />\n    <mesh_2/>\n    ...\n    <mesh_x/>\n    ...\n    <mesh_n*n/>\n  <mesh/>\n</Canvas>\n```\n\n**方針:** 各マス全ての状態(state)を**Mesh_root**で管理する。\nmeshのonClick()が発火した際に、onClick内でステートフックを呼び出し、プロパティを更新して、更新したプロパティをmesh_xに渡して、状態管理をする。\n\n## 完成したもの\n\n> リンク: https://zodiac-g12.github.io/lightouts/\n\nライツアウトの実装はインターネット上によくあるが、\n私の実装では差別化を主張できる点がある。\n「SHOW ANSWER」というボタンをクリックすることで、全部消灯するのに必要な、タップするべき場所のマス(ブロック)が回転するという機能である。\n\n回答を求めるアルゴリズムについては、線形代数の初歩的な素養を要求し、複雑で長くなってしまうため今回は割愛する。\n'}},computed:{kiji:function(){return c()(this.prekiji)}},components:{DefaultArticle:function(){return e.e(0).then(e.bind(null,283))}}},h=e(20),component=Object(h.a)(o,(function(){var n=this.$createElement,t=this._self._c||n;return t("div",[t("DefaultArticle",{attrs:{content:{link:this.link,kiji:this.kiji}}})],1)}),[],!1,null,null,null);t.default=component.exports}}]);