(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{269:function(n,t,e){"use strict";e.r(t);var _=e(77),r=e.n(_),l={data:function(){return{link:"content14",prekiji:'\n## 問題\n　EN: A leaf is torn from a paperback novel. The sum of the numbers on the remaining pages is 15000.\nWhat are the page numbers on the torn leaf.\n\n　JP: 本から1枚の紙が破れています。残りのページ数の合計は15000です。\n破れた紙のページ番号は何でしょうか？\n\n> RMO-1994: https://www.isical.ac.in/~rmo/papers/rmo/rmo-1994.pdf\n\n## TLDR\n\n- [解導出プログラム](https://github.com/zodiac-G12/rmo/blob/master/src/main.rs)\n\n## 解法\n\n　以下の手順で解を導く。\n\n1. ページ数の合計を使って、その本のおおよその最大ページ数を導く\n2. おおよその最大ページ数は__小数が含まれる__(例えば173.3とかな)ので、天井(173.3->__174__)と床(173.3->__173__)の数字 __(173,174)__ を用意する\n3. (2)の手順で導いた最大ページ数からページ数の合計のペアを導く\n4. (3)の手順で導いたページ数の合計から当初の目的のページ数の合計(例えば15000)を引く\n5. (4)の手順で導いた数を2で割って天井と床の数字のペアを用意する\n6. (5)の手順で導いたペアの床が2の倍数でないものが答えとなる\n\n## コード\n\n```rust\nfn boundary_max_page(x: i64) -> [i64; 2] {\n    let ans_float: f64 = ((x * 2) as f64).sqrt();\n\n    return [ans_float.floor() as i64, ans_float.ceil() as i64];\n}\n\nfn total(n: i64) -> i64 {\n    return (n*(n+1)/2) as i64;\n}\n\nfn main() {\n    let n: i64 = 15000;\n\n    let max_pages = boundary_max_page(n);\n\n    for max_page in max_pages.iter() {\n        let mut total_page: i64 = total(*max_page);\n        let mut taked_max_page = *max_page;\n        let diff: f64 = (total_page - n) as f64;\n        let diff_dived: f64 = diff / 2.0_f64;\n        let mut candidates: [i64; 2] = [diff_dived.floor() as i64, diff_dived.ceil() as i64];\n        if total_page == n {\n            total_page += max_page+1 + max_page+2;\n            candidates = [max_page+1, max_page+2];\n            taked_max_page += 2;\n        }\n        if candidates[0] % 2 == 0 {\n            continue;\n        }\n        println!("max page: {}", taked_max_page);\n        println!("total page: {}", total_page);\n        println!("diff: {}", diff);\n        println("diff_dived: {}", diff_dived);\n        println!("candidates: {:?}", candidates);\n    }\n}\n```\n\n<br>\n\n## コードの解説\n- boundary_max_page(): 手順(2)に相当する操作\n- total(): 手順(3)に相当する操作\n- diff: 手順(4)で得られる値\n- candidates: 手順(5)で得られる数字のペア\n\n### "candidates[0] % 2 == 0" について - 手順(6)の詳細\n　ページというのは1から始まり、紙の左下に1,3,5,...と__奇数__が現れるものであるため、\n偶数が現れるパターンは答えとなりえないため、答えの候補として切り捨てる\n\n### "if total_page == n"について\n　当初の目的のページ数の合計と改めて用意したページ数の合計が一致した時、\n最終ページの+1と+2が答え候補とするという操作である。\n\n　例えば目的のページ数が15000じゃなくて300だとすると、\n改めて用意したページ数の合計も300となる。\nそうするとcandidatesの値としては __[0,0]__ を取ることとなってしまう。\n\n　ここで、最終ページの後ろに紙を一枚付け足してやると、辻褄があって、\n__「引き抜かれたページは最終ページの後ろの紙のページだね」__となる。\n\n　したがって、最終ページの+1,+2した値それぞれを解答候補として保存する必要がある。\n\n## 所感\n　この問題を総当たりのような手法で解いている人がたくさんいて悲しくなってしまった。\n私のこのプログラム(アルゴリズム)は、15000に限らず、一般化されているので、\nどんなページ数に対しても解を導くことができるはず。\n\n　しかしながら、どちらかというとRustの訓練感が強かった。\nTypeScriptのノリでRustもクラス作ってメソッドはやしてやろうと思ったが、\n調べたりして試してみたが、結局思うようなプログラムが書けなくて諦めてしまった。\n訓練をもっと積んでいきたい所存である。\n\n'}},computed:{kiji:function(){return r()(this.prekiji)}},components:{DefaultArticle:function(){return e.e(0).then(e.bind(null,283))}}},f=e(20),component=Object(f.a)(l,(function(){var n=this.$createElement,t=this._self._c||n;return t("div",[t("DefaultArticle",{attrs:{content:{link:this.link,kiji:this.kiji}}})],1)}),[],!1,null,null,null);t.default=component.exports}}]);