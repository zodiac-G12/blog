(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{268:function(n,e,t){"use strict";t.r(e);var r=t(77),c=t.n(r),o={data:function(){return{link:"content13",prekiji:'\n## 内容\n　ハフマン符号化のアルゴリズム紹介。\n\n## TLDR\n- [参考文献](https://www.mnc.toho-u.ac.jp/v-lab/yobology/Huffman_code/Huffman_code.htm)\n- [私の書いたコード](https://github.com/zodiac-G12/huffman-ts)\n\n## 動機\n　計算機を触る人間として、最近、計算機科学的な知識が不足していることを実感したので、\n先駆けとしてのアルゴリズムとプログラムの復習を目的とした。\n\n　経緯としては、HaskellやC++の文献を調べていて、コンパイラの話に全くついていけなかったので、\nついていけるようになりたいし、プログラムライフサイクルフェーズの理解も確固たるものにしたい。\n\n　あとは余談ではあるけれども、近隣諸国やヨーロッパやアメリカのエンジニアは、日本の人のエンジニアと比較すると、\nスキルスタックや計算機に対する理解度に関するアベレージが、気持ち高い気がしていて、\n日本人の私としては、ちょっと危機感を覚えているという次第である。自分の身は自分で守らなければ。\n\n## ハフマン符号の特徴\n　説明する際の特徴として以下の点を挙げる\n\n1. コンパクト符号\n2. 特許がない\n3. JPEG,ZIP(Deflate)で使われている\n\n> wikipedia: [ハフマン符号](https://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%95%E3%83%9E%E3%83%B3%E7%AC%A6%E5%8F%B7#:~:text=%E3%83%8F%E3%83%95%E3%83%9E%E3%83%B3%E7%AC%A6%E5%8F%B7%EF%BC%88%E3%83%8F%E3%83%95%E3%83%9E%E3%83%B3%E3%81%B5%E3%81%94%E3%81%86,%E3%81%AA%E3%81%A9%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8B%E3%80%82)\n\n---\n### 1. コンパクト符号\n\n　符号化しても一意的に__復号可能__である点。尚且つ、__平均符号長が最小__となる点。\n\n以上の説明を、より簡単に説明することにする。\n\n　複合可能とは、符号化した後でももとの情報に戻せることを意味する。\n\n　平均符号長が最小とは、符号化した後の系列が効率的で、割と短くて済みますよということである。\n\n> 発展: クラフトの不等式、マクミランの不等式という定理があり、これらから、符号語の長さは極端に短くすることができないということが知られている (引用元: [コロナ社 - 情報理論 宮川洋 著](https://www.coronasha.co.jp/np/isbn/9784339001020/) )\n\n---\n### 2. 特許がない\n\n　特許がないので、JPEGや、ZIPでも採用されている。\n\n---\n### 3. JPEG,ZIP(Deflate)で使われている\n\n- JPEG\n\n　DCTプロセスという画像変換と復元の規定があり、ベースラインプロセスで採用されているようである。\n\n> JPEG関連の参考文献: [J-Stage](https://www.jstage.jst.go.jp/article/mit/14/3/14_231/_pdf), [W3C](https://www.w3.org/Graphics/JPEG/itu-t81.pdf)\n\n- ZIP\n\n　様々な圧縮手法があるが、例えばDeflateは、LZ法とHuffmanを組み合わせた可逆データ圧縮アルゴリズムである。\n\n> Deflateの参考文献: [RFC 1951](https://www.ietf.org/rfc/rfc1951.txt)\n\n## ハフマン符号のアルゴリズム\n\n　説明に自信がないので、まずは[参考文献](https://www.mnc.toho-u.ac.jp/v-lab/yobology/Huffman_code/Huffman_code.htm)を貼っておく。併せて見ていただきたく思う。\n\n　与えられているものとして具体例として、"ABBCCC"のような文字列を考える。\n例えばこの場合の各文字の個数は、Aに関しては1つ、B:2, C:3となっている。全体の文字列の長さは6であるので、\n各文字の出現確率はP(A):1/6, P(B):2/6, P(C):3/6となる。\n  \n　以下の手順で符号化する\n\n1. 確率の大きさ順でアルファベット一覧のアルファベットを並べ替える\n2. 最小とその次に最小のアルファベットを選択し minestPair と定義する\n3. minestPair の二つのアルファベットをバイナリツリーとして、二本の枝で合流させる\n4. 上の合流点に minestPair の確率の和を割り当てる\n5. minestPair の二つのアルファベットのペアを一つのアルファベットを解釈し、それらの確率の和をそのアルファベットの確率と解釈する\n6. (5.)の手順で作ったデータを アルファベットの一覧 に代入する\n7. アルファベットが一つになる(確率の大小の比較対象がなくなる)まで、(1.)~(6.)を繰り返す\n8. バイナリツリーのrootから(0,1)を割り当てていく\n\n> 注意: (3.)で合流する際のルールを決める必要がある。確率が小さい方を左leafにするなど\n\n> 注意: (8.)で(0,1)を割り当てていく際のルールを決める必要がある。左nodeに1を割り当てるなど\n\n## 出来上がったコード\n\n- https://github.com/zodiac-G12/huffman-ts/blob/master/index.ts\n\n```typescript\ninterface NumberValueObject {\n  [key: string]: number;\n}\n\ninterface StringValueObject {\n  [key: string]: string;\n}\n\ntype LetterDistribution = NumberValueObject;\n\ntype AppearanceArray = AppearanceItem[];\n\ninterface AppearanceItem {\n  symbol: Symbols;\n  p: number;\n}\n\ntype Symbols = string | any;\n\ntype BinaryTreeSymbols = (string | BinaryTreeSymbols)[];\n\ninterface Appearance {\n  [key: string]: AppearanceItem;\n}\n\ntype EncodedMap = StringValueObject;\n\ninterface HuffmanProps {\n  letterDistribution: LetterDistribution;\n  appearance: Appearance;\n  packedAppearance: BinaryTreeSymbols;\n  encodedMap: EncodedMap;\n}\n\ninterface CreateHuffmanProps {\n  letterDistribution: LetterDistribution\n}\n\nclass Huffman {\n  // 文字と出現数の関係を表すオブジェクト\n  public readonly letterDistribution: LetterDistribution;\n\n  // 各文字の出現\'率\'の関係を表すオブジェクト\n  public readonly appearance: Appearance;\n\n  // 出現率の大小関係から生成するバイナリツリー表現の配列\n  // ex). ["A",["B",[["C","D"],["E",["F",["G","H"]]]]]]\n  public readonly packedAppearance: BinaryTreeSymbols;\n\n  // HuffmanCodeに変換済みのデータ\n  public readonly encodedMap: EncodedMap;\n\n  private constructor (props: HuffmanProps) {\n    this.letterDistribution = props.letterDistribution;\n    this.appearance = props.appearance;\n    this.packedAppearance = props.packedAppearance;\n    this.encodedMap = props.encodedMap;\n  }\n\n  public static toEncodeMap: EncodedMap = {};\n\n  // 文字の出現回数分の文字を生成し、それらを要素とする配列を生成\n  public static createChars(letterDistribution: LetterDistribution): string[] {\n    const chars: string[] = Object.keys(letterDistribution).flatMap((c: string) => {\n      return [...Array(letterDistribution[c]).keys()].map(() => c);\n    });\n\n    return chars;\n  }\n\n  // 各文字の出現\'率\'の関係を表すオブジェクトを生成\n  public static createAppearance(chars: string[]): Appearance {\n    const appearance: Appearance = {};\n    const sententLength: number = chars.length;\n\n    // 各文字の出現回数をカウント\n    chars.forEach(c => appearance[c] !== undefined ? appearance[c].p += 1 : appearance[c] = {symbol: c, p: 1});\n\n    // 各文字の出現率を計算\n    Object.keys(appearance).forEach(c => appearance[c].p /= sententLength);\n\n    return appearance;\n  }\n\n  // 出現率の大小関係から生成するバイナリツリー表現の配列を生成\n  public static createPackedAppearance(appearance: Appearance): BinaryTreeSymbols {\n    const sortedAppearance: AppearanceArray = Object.values(appearance).sort((a,b) => b.p - a.p);\n\n    while (sortedAppearance.length !== 1) {\n      const minest: AppearanceItem = sortedAppearance.reduce((a,b) => a.p < b.p ? a : b);\n      const minestIndex: number = sortedAppearance.indexOf(minest);\n      sortedAppearance.splice(minestIndex,1);\n\n      const miner: AppearanceItem = sortedAppearance.reduce((a,b) => a.p < b.p ? a : b);\n      const minerIndex: number = sortedAppearance.indexOf(miner);\n      sortedAppearance.splice(minerIndex,1);\n\n      const arrayLenght: number = sortedAppearance.length;\n\n      const symbol: Symbols = !Array.isArray(minest.symbol) && Array.isArray(miner.symbol) ?\n        [minest.symbol, miner.symbol] : [miner.symbol, minest.symbol];\n\n      const p: number = ( minest.p*100 + miner.p*100 ) / 100;\n\n      sortedAppearance[arrayLenght] = {symbol, p};\n    }\n\n    return sortedAppearance[0].symbol;\n  }\n\n  // バイナリツリーに対して、再起的にバイナリを割り当てて符号化していくメソッド\n  public static diver(symbols: Symbols, binary: string): void {\n    const firstSymbolIsArray: boolean = Array.isArray(symbols[0]);\n    const secondSymbolIsArray: boolean = Array.isArray(symbols[1]);\n\n    if (!firstSymbolIsArray) {\n      this.toEncodeMap[symbols[0]] = binary + "1";\n    }\n    if (!firstSymbolIsArray && !secondSymbolIsArray) {\n      this.toEncodeMap[symbols[1]] = binary + "0";\n      return;\n    }\n    if (!firstSymbolIsArray && secondSymbolIsArray) {\n      return this.diver(symbols[1], binary + "0")\n    }\n\n    return this.diver(symbols[0], binary + "1"), this.diver(symbols[1], binary + "0");\n  }\n\n  // 符号化をするための前段となるメソッド\n  public static encode(packedAppearance: AppearanceArray): EncodedMap {\n    const firstBinary: string = "";\n\n    this.toEncodeMap = {};\n\n    this.diver(packedAppearance, firstBinary);\n\n    return this.toEncodeMap;\n  }\n\n  // 新しいHuffmanクラスを生成するメソッド\n  public static createNew(props: CreateHuffmanProps): Huffman {\n    const letterDistribution: LetterDistribution = props.letterDistribution;\n    const chars: string[] = this.createChars(letterDistribution);\n    const appearance: Appearance = this.createAppearance(chars);\n    const packedAppearance: AppearanceArray = this.createPackedAppearance(appearance);\n    const encodedMap: EncodedMap = this.encode(packedAppearance);\n\n    console.log(letterDistribution, chars, appearance, JSON.stringify(packedAppearance));\n\n    return new Huffman({\n      letterDistribution,\n      appearance,\n      packedAppearance,\n      encodedMap,\n    });\n  }\n}\n\n\nconst letterDistribution: LetterDistribution = {\n  "A": 50,\n  "B": 20,\n  "C": 10,\n  "D": 8,\n  "E": 5,\n  "F": 4,\n  "G": 2,\n  "H": 1,\n};\n\nconst huffman: Huffman = Huffman.createNew({letterDistribution});\n\nconsole.log(huffman.encodedMap);\n```\n<br>\n\n## 所感\n\n　処理速度より、可読性を意識した(可読性が高いとは言っていない)。\n第一処理速度を意識するならCとかRustで書きますわな。処理速度が大事なアルゴリズムだけども。\n\n　TypeScriptになれていなくて、型が大分酷い。any使ってごめんなさい。\nそれに、プロパティごとでファイル区切ってValueObjectにした方が良かったと思うが、\n当初ここまでファイルでかくなると思わなかったし、そこまでやるつもりもなかった。\n余裕があったらアップデートします。\n\n'}},computed:{kiji:function(){return c()(this.prekiji)}},components:{DefaultArticle:function(){return t.e(0).then(t.bind(null,283))}}},l=t(20),component=Object(l.a)(o,(function(){var n=this.$createElement,e=this._self._c||n;return e("div",[e("DefaultArticle",{attrs:{content:{link:this.link,kiji:this.kiji}}})],1)}),[],!1,null,null,null);e.default=component.exports}}]);